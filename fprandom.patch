diff --git a/browser/app/profile/firefox.js b/browser/app/profile/firefox.js
--- a/browser/app/profile/firefox.js
+++ b/browser/app/profile/firefox.js
@@ -1131,6 +1131,9 @@ pref("services.sync.prefs.sync.privacy.d
 pref("services.sync.prefs.sync.privacy.sanitize.sanitizeOnShutdown", true);
 pref("services.sync.prefs.sync.privacy.trackingprotection.enabled", true);
 pref("services.sync.prefs.sync.privacy.trackingprotection.pbmode.enabled", true);
+pref("services.sync.prefs.sync.privacy.fingerprintingprotection.enabled", true);
+pref("services.sync.prefs.sync.privacy.fingerprintingprotection.pbmode.enabled", true);
+pref("services.sync.prefs.sync.privacy.fingerprintingprotection.random.enabled", true);
 pref("services.sync.prefs.sync.security.OCSP.enabled", true);
 pref("services.sync.prefs.sync.security.OCSP.require", true);
 pref("services.sync.prefs.sync.security.default_personal_cert", true);
@@ -1422,8 +1425,10 @@ pref("media.gmp-provider.enabled", true)
 
 #ifdef NIGHTLY_BUILD
 pref("privacy.trackingprotection.ui.enabled", true);
+pref("privacy.fingerprintingprotection.ui.enabled", true);
 #else
 pref("privacy.trackingprotection.ui.enabled", false);
+pref("privacy.fingerprintingprotection.ui.enabled", true);
 #endif
 pref("privacy.trackingprotection.introCount", 0);
 pref("privacy.trackingprotection.introURL", "https://www.mozilla.org/%LOCALE%/firefox/%VERSION%/tracking-protection/start/");
diff --git a/browser/branding/unofficial/locales/en-US/brand.dtd b/browser/branding/unofficial/locales/en-US/brand.dtd
--- a/browser/branding/unofficial/locales/en-US/brand.dtd
+++ b/browser/branding/unofficial/locales/en-US/brand.dtd
@@ -2,8 +2,8 @@
    - License, v. 2.0. If a copy of the MPL was not distributed with this
    - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
 
-<!ENTITY  brandShorterName      "Nightly">
-<!ENTITY  brandShortName        "Nightly">
-<!ENTITY  brandFullName         "Nightly">
+<!ENTITY  brandShorterName      "FP Random (DiverSE build)">
+<!ENTITY  brandShortName        "FP Random (DiverSE build)">
+<!ENTITY  brandFullName         "FP Random (DiverSE build)">
 <!ENTITY  vendorShortName       "Mozilla">
 <!ENTITY  trademarkInfo.part1   " ">
diff --git a/browser/branding/unofficial/locales/en-US/brand.properties b/browser/branding/unofficial/locales/en-US/brand.properties
--- a/browser/branding/unofficial/locales/en-US/brand.properties
+++ b/browser/branding/unofficial/locales/en-US/brand.properties
@@ -2,9 +2,9 @@
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
-brandShorterName=Nightly
-brandShortName=Nightly
-brandFullName=Nightly
+brandShorterName=FP Random (DiverSE build)
+brandShortName=FP Random (DiverSE build)
+brandFullName=FP Random (DiverSE build)
 vendorShortName=Mozilla
 
 syncBrandShortName=Sync
diff --git a/browser/components/preferences/in-content/privacy.js b/browser/components/preferences/in-content/privacy.js
--- a/browser/components/preferences/in-content/privacy.js
+++ b/browser/components/preferences/in-content/privacy.js
@@ -52,6 +52,25 @@ var gPrivacyPane = {
   },
 
   /**
+   * Show the Fingerprinting Protection UI depending on the
+   * privacy.fingerprintingprotection.ui.enabled pref, and linkify its Learn More link
+   */
+  _initFingerprintingProtection: function() {
+    if (!Services.prefs.getBoolPref("privacy.fingerprintingprotection.ui.enabled")) {
+        return;
+      }
+
+    let link = document.getElementById("fingerprintingProtectionLearnMore");
+    let url = "https://amiunique.org/faq";
+    link.setAttribute("href", url);
+
+    document.getElementById("fingerprintingprotectionbox").hidden = false;
+    document.getElementById("fingerprintingmodebox").hidden = false;
+
+    this.fingerprintingProtectionReadPrefs();
+  },
+
+  /**
    * Initialize autocomplete to ensure prefs are in sync.
    */
   _initAutocomplete() {
@@ -129,6 +148,7 @@ var gPrivacyPane = {
     this.initAutoStartPrivateBrowsingReverter();
     this._initTrackingProtection();
     this._initTrackingProtectionPBM();
+    this._initFingerprintingProtection();
     this._initAutocomplete();
     this._initBrowserContainers();
 
@@ -174,6 +194,10 @@ var gPrivacyPane = {
                      gPrivacyPane.showBlockLists);
     setEventListener("changeBlockListPBM", "command",
                      gPrivacyPane.showBlockLists);
+    setEventListener("fingerprintingProtectionRadioGroup", "command",
+                     gPrivacyPane.fingerprintingProtectionWritePrefs);
+    setEventListener("fingerprintingModeRadioGroup", "command",
+                     gPrivacyPane.fingerprintingProtectionWritePrefs);
     setEventListener("browserContainersCheckbox", "command",
                      gPrivacyPane._checkBrowserContainers);
     setEventListener("browserContainersSettings", "command",
@@ -224,6 +248,59 @@ var gPrivacyPane = {
     }
   },
 
+  // Fingerprinting PROTECTION MODE
+
+  /**
+   * Selects the right item of the Fingerprinting Protection radiogroup.
+   */
+  fingerprintingProtectionReadPrefs() {
+    let enabledPref = document.getElementById("privacy.fingerprintingprotection.enabled");
+    let pbmPref = document.getElementById("privacy.fingerprintingprotection.pbmode.enabled");
+    let radiogroup = document.getElementById("fingerprintingProtectionRadioGroup");
+    radiogroup.value = enabledPref.value ? "always" :
+        pbmPref.value ? "private" :
+            "never";
+
+    let randomModePref = document.getElementById("privacy.fingerprintingprotection.random.enabled");
+    let modeRadioGroup = document.getElementById("fingerprintingModeRadioGroup");
+    modeRadioGroup.value = randomModePref.value ? "random" : "session";
+  },
+
+  /**
+   * Sets the pref values based on the selected item of the radiogroup.
+   */
+  fingerprintingProtectionWritePrefs() {
+    let enabledPref = document.getElementById("privacy.fingerprintingprotection.enabled");
+    let pbmPref = document.getElementById("privacy.fingerprintingprotection.pbmode.enabled");
+    let radiogroup = document.getElementById("fingerprintingProtectionRadioGroup");
+    switch (radiogroup.value) {
+      case "always":
+        enabledPref.value = true;
+        pbmPref.value = true;
+        break;
+      case "private":
+        enabledPref.value = false;
+        pbmPref.value = true;
+        break;
+      case "never":
+        enabledPref.value = false;
+        pbmPref.value = false;
+        break;
+    }
+
+    let randomModePref = document.getElementById("privacy.fingerprintingprotection.random.enabled");
+    let modeRadioGroup = document.getElementById("fingerprintingModeRadioGroup");
+
+    switch (modeRadioGroup.value) {
+      case "random":
+        randomModePref.value = true;
+        break;
+      case "session":
+        randomModePref.value = false;
+        break;
+    }
+  },
+
   // HISTORY MODE
 
   /**
diff --git a/browser/components/preferences/in-content/privacy.xul b/browser/components/preferences/in-content/privacy.xul
--- a/browser/components/preferences/in-content/privacy.xul
+++ b/browser/components/preferences/in-content/privacy.xul
@@ -45,6 +45,17 @@
               name="browser.urlbar.suggest.openpage"
               type="bool"/>
 
+  <!-- Fingerprinting -->
+  <preference id="privacy.fingerprintingprotection.enabled"
+              name="privacy.fingerprintingprotection.enabled"
+              type="bool"/>
+  <preference id="privacy.fingerprintingprotection.pbmode.enabled"
+              name="privacy.fingerprintingprotection.pbmode.enabled"
+              type="bool"/>
+  <preference id="privacy.fingerprintingprotection.random.enabled"
+              name="privacy.fingerprintingprotection.random.enabled"
+              type="bool"/>
+
   <!-- History -->
   <preference id="places.history.enabled"
               name="places.history.enabled"
@@ -309,3 +320,49 @@
     </hbox>
   </vbox>
 </groupbox>
+
+<!-- Fingerprinting -->
+<groupbox id="fingerprintingGroup" data-category="panePrivacy" hidden="true">
+<vbox id="fingerprintingprotectionbox" hidden="true">
+  <hbox align="start">
+    <vbox>
+      <caption><label>&fingerprintingProtectionHeader.label;
+        <label id="fingerprintingProtectionLearnMore" class="text-link"
+               value="&fingerprintingProtectionLearnMore.label;"/>
+      </label></caption>
+      <radiogroup id="fingerprintingProtectionRadioGroup">
+        <radio value="always"
+               label="&fingerprintingProtectionAlways.label;"
+               accesskey="&fingerprintingProtectionAlways.accesskey;"/>
+        <radio value="private"
+               label="&fingerprintingProtectionPrivate.label;"
+               accesskey="&fingerprintingProtectionPrivate.accesskey;"/>
+        <radio value="never"
+               label="&fingerprintingProtectionNever.label;"
+               accesskey="&fingerprintingProtectionNever.accesskey;"/>
+      </radiogroup>
+    </vbox>
+    <spacer flex="1" />
+  </hbox>
+</vbox>
+<vbox id="fingerprintingmodebox" hidden="true">
+  <hbox align="start">
+    <vbox>
+      <caption>
+        <label>
+          &fingerprintingModeHeader.label;
+        </label>
+      </caption>
+      <radiogroup id="fingerprintingModeRadioGroup">
+        <radio value="random"
+               label="&fingerprintingModeRandom.label;"
+               accesskey="&fingerprintingModeRandom.accesskey;"/>
+        <radio value="session"
+               label="&fingerprintingModeSession.label;"
+               accesskey="&fingerprintingModeSession.accesskey;"/>
+      </radiogroup>
+    </vbox>
+    <spacer flex="1" />
+  </hbox>
+</vbox>
+</groupbox>
diff --git a/browser/locales/en-US/chrome/browser/preferences/privacy.dtd b/browser/locales/en-US/chrome/browser/preferences/privacy.dtd
--- a/browser/locales/en-US/chrome/browser/preferences/privacy.dtd
+++ b/browser/locales/en-US/chrome/browser/preferences/privacy.dtd
@@ -26,6 +26,21 @@
 <!ENTITY  doNotTrack.settings.label     "manage your Do Not Track settings">
 <!ENTITY  doNotTrack.post.label         ".">
 
+<!ENTITY  fingerprintingProtectionHeader.label       "Use Fingerprinting Protection">
+<!ENTITY  fingerprintingProtectionAlways.label       "Always">
+<!ENTITY  fingerprintingProtectionAlways.accesskey   "1">
+<!ENTITY  fingerprintingProtectionPrivate.label      "Only in private windows">
+<!ENTITY  fingerprintingProtectionPrivate.accesskey  "2">
+<!ENTITY  fingerprintingProtectionNever.label        "Never">
+<!ENTITY  fingerprintingProtectionNever.accesskey    "3">
+<!ENTITY  fingerprintingProtectionLearnMore.label    "Learn more">
+
+<!ENTITY fingerprintingModeHeader.label         "Randomization mode">
+<!ENTITY fingerprintingModeRandom.label         "Always random">
+<!ENTITY fingerprintingModeRandom.accesskey     "1">
+<!ENTITY fingerprintingModeSession.label        "Per session">
+<!ENTITY fingerprintingModeSession.accesskey    "2">
+
 <!ENTITY  history.label                 "History">
 
 <!ENTITY  locationBar.label             "Location Bar">
diff --git a/dom/canvas/CanvasRenderingContext2D.cpp b/dom/canvas/CanvasRenderingContext2D.cpp
--- a/dom/canvas/CanvasRenderingContext2D.cpp
+++ b/dom/canvas/CanvasRenderingContext2D.cpp
@@ -24,6 +24,7 @@
 #include "nsIInterfaceRequestorUtils.h"
 #include "nsIFrame.h"
 #include "nsError.h"
+#include "nsIFontEnumerator.h"
 
 #include "nsCSSParser.h"
 #include "mozilla/css/StyleRule.h"
@@ -1106,6 +1107,34 @@ CanvasRenderingContext2D::WrapObject(JSC
   return CanvasRenderingContext2DBinding::Wrap(aCx, this, aGivenProto);
 }
 
+int32_t MIN_HEX_CODE = 0;
+int32_t MAX_HEX_CODE = 255;
+int randomR, randomG, randomB;
+
+int getRandomRGB(){
+    std::srand(time(NULL));
+    //Range from -3 to +3
+    randomR = rand() % 7;
+    randomG = rand() % 7;
+    randomB = rand() % 7;
+    return 0;
+}
+int verifRGB = getRandomRGB();
+
+int
+getModifiedColor(int color, int randomNum)
+{
+
+  int newColor = color - 3 + randomNum;
+  if (MIN_HEX_CODE > newColor) {
+    newColor = 0;
+  }
+  if(newColor > MAX_HEX_CODE) {
+    newColor = 255;
+  }
+  return newColor;
+}
+
 bool
 CanvasRenderingContext2D::ParseColor(const nsAString& aString,
                                      nscolor* aColor)
@@ -1139,6 +1168,24 @@ CanvasRenderingContext2D::ParseColor(con
       value, presShell ? presShell->GetPresContext() : nullptr, parentContext,
       *aColor);
   }
+
+  if (mozilla::Preferences::GetBool("privacy.fingerprintingprotection.enabled", true)) {
+    int r(NS_GET_R(*aColor));
+    int g(NS_GET_G(*aColor));
+    int b(NS_GET_B(*aColor));
+    int a(NS_GET_A(*aColor));
+
+    //If random mode selected, reinitialize color variables
+    if(mozilla::Preferences::GetBool("privacy.fingerprintingprotection.random.enabled", true)){
+      verifRGB = getRandomRGB();
+    }
+
+    r = getModifiedColor(r,randomR);
+    g = getModifiedColor(g,randomG);
+    b = getModifiedColor(b,randomB);
+    *aColor = NS_RGBA(r, g, b, a);
+  }
+
   return true;
 }
 
@@ -3604,11 +3651,60 @@ CanvasRenderingContext2D::TransformWillU
 // text
 //
 
+nsString randomFont;
+char16_t **fonts;
+uint32_t count_fonts;
+
+int initDone = 0;
+
+int getRandomFont(){
+  int randomNum = rand() % count_fonts;
+  randomFont.Assign(fonts[randomNum]);
+  return 0;
+}
+
+int initFontList() {
+  nsresult rv;
+  nsCOMPtr <nsIFontEnumerator> fontEnum = do_GetService("@mozilla.org/gfx/fontenumerator;1", &rv);
+  const char *aLangGroup = "en";
+  const char *aGeneric = "sans-serif";
+  fontEnum->EnumerateFonts(aLangGroup, aGeneric, &count_fonts, &fonts);
+  std::srand(time(NULL));
+  getRandomFont();
+  return 0;
+}
+
+nsString getModifiedFont(const nsAString& aFont) {
+  if(mozilla::Preferences::GetBool("privacy.fingerprintingprotection.random.enabled", true)){
+    if(initDone == 0){
+      initDone = 1;
+      initFontList();
+    }
+    getRandomFont();
+  }
+  nsString end = NS_LITERAL_STRING("'");
+  int pos = aFont.FindChar(' ');
+  const nsAString &starting = Substring(aFont, 0, pos);
+  nsString userfont(starting);
+  userfont.Append(NS_LITERAL_STRING(" '"));
+  userfont.Append(randomFont);
+  userfont.Append(end);
+
+  return userfont;
+}
+
 void
 CanvasRenderingContext2D::SetFont(const nsAString& aFont,
                                   ErrorResult& aError)
 {
-  SetFontInternal(aFont, aError);
+  nsString userfont;
+  if (mozilla::Preferences::GetBool("privacy.fingerprintingprotection.enabled", true)) {
+    userfont = getModifiedFont(aFont);
+  }
+  else {
+    userfont = aFont;
+  }
+  SetFontInternal(userfont, aError);
 }
 
 bool
diff --git a/dom/media/webaudio/AudioNodeEngine.cpp b/dom/media/webaudio/AudioNodeEngine.cpp
--- a/dom/media/webaudio/AudioNodeEngine.cpp
+++ b/dom/media/webaudio/AudioNodeEngine.cpp
@@ -53,16 +53,40 @@ WriteZeroesToAudioBlock(AudioBlock* aChu
   }
 }
 
+float initScale(){
+    std::srand(time(NULL));
+    return rand();
+}
+float ra = initScale();
+
+float getNewScale(float aScale){
+  if (mozilla::Preferences::GetBool("privacy.fingerprintingprotection.random.enabled", true)) {
+    ra = rand();
+  }
+  if(aScale>0.05){
+    return aScale - ra / ( RAND_MAX / 0.001 );
+  } else {
+    return aScale;
+  };
+}
+
 void AudioBufferCopyWithScale(const float* aInput,
                               float aScale,
                               float* aOutput,
                               uint32_t aSize)
 {
-  if (aScale == 1.0f) {
-    PodCopy(aOutput, aInput, aSize);
+  if (mozilla::Preferences::GetBool("privacy.fingerprintingprotection.enabled", true)) {
+    float newScale = getNewScale(aScale);
+    for (uint32_t i = 0; i < aSize; ++i) {
+      aOutput[i] = aInput[i] * newScale;
+    }
   } else {
-    for (uint32_t i = 0; i < aSize; ++i) {
-      aOutput[i] = aInput[i]*aScale;
+    if (aScale == 1.0f) {
+      PodCopy(aOutput, aInput, aSize);
+    } else {
+      for (uint32_t i = 0; i < aSize; ++i) {
+        aOutput[i] = aInput[i] * aScale;
+      }
     }
   }
 }
@@ -72,51 +96,59 @@ void AudioBufferAddWithScale(const float
                              float* aOutput,
                              uint32_t aSize)
 {
+
+  if (mozilla::Preferences::GetBool("privacy.fingerprintingprotection.enabled", true)) {
+    float newScale = getNewScale(aScale);
+    for (uint32_t i = 0; i < aSize; ++i) {
+      aOutput[i] += aInput[i] * newScale;
+    }
+  } else {
 #ifdef BUILD_ARM_NEON
-  if (mozilla::supports_neon()) {
-    AudioBufferAddWithScale_NEON(aInput, aScale, aOutput, aSize);
-    return;
-  }
+    if (mozilla::supports_neon()) {
+      AudioBufferAddWithScale_NEON(aInput, aScale, aOutput, aSize);
+      return;
+    }
 #endif
 
 #ifdef USE_SSE2
-  if (mozilla::supports_sse2()) {
-    if (aScale == 1.0f) {
-      while (aSize && (!IS_ALIGNED16(aInput) || !IS_ALIGNED16(aOutput))) {
-        *aOutput += *aInput;
-        ++aOutput;
-        ++aInput;
-        --aSize;
+    if (mozilla::supports_sse2()) {
+      if (aScale == 1.0f) {
+        while (aSize && (!IS_ALIGNED16(aInput) || !IS_ALIGNED16(aOutput))) {
+          *aOutput += *aInput;
+          ++aOutput;
+          ++aInput;
+          --aSize;
+        }
+      } else {
+        while (aSize && (!IS_ALIGNED16(aInput) || !IS_ALIGNED16(aOutput))) {
+          *aOutput += *aInput*aScale;
+          ++aOutput;
+          ++aInput;
+          --aSize;
+        }
       }
-    } else {
-      while (aSize && (!IS_ALIGNED16(aInput) || !IS_ALIGNED16(aOutput))) {
-        *aOutput += *aInput*aScale;
-        ++aOutput;
-        ++aInput;
-        --aSize;
+
+      // we need to round aSize down to the nearest multiple of 16
+      uint32_t alignedSize = aSize & ~0x0F;
+      if (alignedSize > 0) {
+        AudioBufferAddWithScale_SSE(aInput, aScale, aOutput, alignedSize);
+
+        // adjust parameters for use with scalar operations below
+        aInput += alignedSize;
+        aOutput += alignedSize;
+        aSize -= alignedSize;
       }
     }
-
-    // we need to round aSize down to the nearest multiple of 16
-    uint32_t alignedSize = aSize & ~0x0F;
-    if (alignedSize > 0) {
-      AudioBufferAddWithScale_SSE(aInput, aScale, aOutput, alignedSize);
-
-      // adjust parameters for use with scalar operations below
-      aInput += alignedSize;
-      aOutput += alignedSize;
-      aSize -= alignedSize;
-    }
-  }
 #endif
 
-  if (aScale == 1.0f) {
-    for (uint32_t i = 0; i < aSize; ++i) {
-      aOutput[i] += aInput[i];
-    }
-  } else {
-    for (uint32_t i = 0; i < aSize; ++i) {
-      aOutput[i] += aInput[i]*aScale;
+    if (aScale == 1.0f) {
+      for (uint32_t i = 0; i < aSize; ++i) {
+        aOutput[i] += aInput[i];
+      }
+    } else {
+      for (uint32_t i = 0; i < aSize; ++i) {
+        aOutput[i] += aInput[i] * aScale;
+      }
     }
   }
 }
@@ -134,25 +166,32 @@ AudioBlockCopyChannelWithScale(const flo
                                float aScale,
                                float* aOutput)
 {
-  if (aScale == 1.0f) {
-    memcpy(aOutput, aInput, WEBAUDIO_BLOCK_SIZE*sizeof(float));
+  if (mozilla::Preferences::GetBool("privacy.fingerprintingprotection.enabled", true)) {
+    float newScale = getNewScale(aScale);
+    for (uint32_t i = 0; i < WEBAUDIO_BLOCK_SIZE; ++i) {
+      aOutput[i] = aInput[i] * newScale;
+    }
   } else {
+    if (aScale == 1.0f) {
+      memcpy(aOutput, aInput, WEBAUDIO_BLOCK_SIZE*sizeof(float));
+    } else {
 #ifdef BUILD_ARM_NEON
-    if (mozilla::supports_neon()) {
-      AudioBlockCopyChannelWithScale_NEON(aInput, aScale, aOutput);
-      return;
-    }
+      if (mozilla::supports_neon()) {
+        AudioBlockCopyChannelWithScale_NEON(aInput, aScale, aOutput);
+        return;
+      }
 #endif
 
 #ifdef USE_SSE2
-    if (mozilla::supports_sse2()) {
-      AudioBlockCopyChannelWithScale_SSE(aInput, aScale, aOutput);
-      return;
-    }
+      if (mozilla::supports_sse2()) {
+        AudioBlockCopyChannelWithScale_SSE(aInput, aScale, aOutput);
+        return;
+      }
 #endif
 
-    for (uint32_t i = 0; i < WEBAUDIO_BLOCK_SIZE; ++i) {
-      aOutput[i] = aInput[i]*aScale;
+      for (uint32_t i = 0; i < WEBAUDIO_BLOCK_SIZE; ++i) {
+        aOutput[i] = aInput[i] * aScale;
+      }
     }
   }
 }
@@ -232,25 +271,32 @@ AudioBufferInPlaceScale(float* aBlock,
                         float aScale,
                         uint32_t aSize)
 {
-  if (aScale == 1.0f) {
-    return;
-  }
+  if (mozilla::Preferences::GetBool("privacy.fingerprintingprotection.enabled", true)) {
+    float newScale = getNewScale(aScale);
+    for (uint32_t i = 0; i < aSize; ++i) {
+      *aBlock++ *=  newScale;
+    }
+  } else {
+    if (aScale == 1.0f) {
+      return;
+    }
 #ifdef BUILD_ARM_NEON
-  if (mozilla::supports_neon()) {
-    AudioBufferInPlaceScale_NEON(aBlock, aScale, aSize);
-    return;
-  }
+    if (mozilla::supports_neon()) {
+      AudioBufferInPlaceScale_NEON(aBlock, aScale, aSize);
+      return;
+    }
 #endif
 
 #ifdef USE_SSE2
-  if (mozilla::supports_sse2()) {
-    AudioBufferInPlaceScale_SSE(aBlock, aScale, aSize);
-    return;
-  }
+    if (mozilla::supports_sse2()) {
+      AudioBufferInPlaceScale_SSE(aBlock, aScale, aSize);
+      return;
+    }
 #endif
 
-  for (uint32_t i = 0; i < aSize; ++i) {
-    *aBlock++ *= aScale;
+    for (uint32_t i = 0; i < aSize; ++i) {
+      *aBlock++ *= aScale;
+    }
   }
 }
 
diff --git a/js/src/jsiter.cpp b/js/src/jsiter.cpp
--- a/js/src/jsiter.cpp
+++ b/js/src/jsiter.cpp
@@ -39,6 +39,8 @@
 #include "vm/NativeObject-inl.h"
 #include "vm/Stack-inl.h"
 #include "vm/String-inl.h"
+#include <random>
+#include <ctime>
 
 using namespace js;
 using namespace js::gc;
@@ -275,7 +277,25 @@ EnumerateNativeProperties(JSContext* cx,
     return true;
 }
 
-#ifdef JS_MORE_DETERMINISTIC
+//#ifdef JS_MORE_DETERMINISTIC
+bool b1,b2,b3,b4,b5,bMin,bMax;
+bool bArray[250];
+
+int initBool(){
+    std::srand(time(NULL));
+    b1 = (rand() % 2 == 1);
+    b2 = (rand() % 2 == 1);
+    b3 = (rand() % 2 == 1);
+    b4 = (rand() % 2 == 1);
+    b5 = (rand() % 2 == 1);
+    for (int i = 0; i < 250; ++i) {
+      bArray[i] = (rand() % 2 == 1);
+    }
+    bMin = (rand() % 2 == 1);
+    bMax = (rand() % 2 == 1);
+    return 0;
+}
+int verif = initBool();
 
 struct SortComparatorIds
 {
@@ -286,22 +306,30 @@ struct SortComparatorIds
 
     bool operator()(jsid a, jsid b, bool* lessOrEqualp)
     {
+        /*
+        *lessOrEqualp = (rand() % 2 == 1);
+        return true;
+        */
+
         // Pick an arbitrary order on jsids that is as stable as possible
         // across executions.
         if (a == b) {
-            *lessOrEqualp = true;
+            //*lessOrEqualp = true;
+            *lessOrEqualp = b1;
             return true;
         }
 
         size_t ta = JSID_BITS(a) & JSID_TYPE_MASK;
         size_t tb = JSID_BITS(b) & JSID_TYPE_MASK;
         if (ta != tb) {
-            *lessOrEqualp = (ta <= tb);
+            //*lessOrEqualp = (ta <= tb);
+            *lessOrEqualp = b2;
             return true;
         }
 
         if (JSID_IS_INT(a)) {
-            *lessOrEqualp = (JSID_TO_INT(a) <= JSID_TO_INT(b));
+            //*lessOrEqualp = (JSID_TO_INT(a) <= JSID_TO_INT(b));
+            *lessOrEqualp = b3;
             return true;
         }
 
@@ -311,14 +339,16 @@ struct SortComparatorIds
             JS::SymbolCode ca = JSID_TO_SYMBOL(a)->code();
             JS::SymbolCode cb = JSID_TO_SYMBOL(b)->code();
             if (ca != cb) {
-                *lessOrEqualp = uint32_t(ca) <= uint32_t(cb);
+                //*lessOrEqualp = uint32_t(ca) <= uint32_t(cb);
+                *lessOrEqualp = b4;
                 return true;
             }
             MOZ_ASSERT(ca == JS::SymbolCode::InSymbolRegistry || ca == JS::SymbolCode::UniqueSymbol);
             astr = JSID_TO_SYMBOL(a)->description();
             bstr = JSID_TO_SYMBOL(b)->description();
             if (!astr || !bstr) {
-                *lessOrEqualp = !astr;
+                //*lessOrEqualp = !astr;
+                *lessOrEqualp = b5;
                 return true;
             }
 
@@ -338,12 +368,20 @@ struct SortComparatorIds
         if (!CompareStrings(cx, astr, bstr, &result))
             return false;
 
-        *lessOrEqualp = (result <= 0);
+        //*lessOrEqualp = (result <= 0);
+        if (result <= -125){
+          *lessOrEqualp = bMin;
+        } else if(result>=125){
+          *lessOrEqualp = bMax;
+        } else {
+          int ind = result+125;
+          *lessOrEqualp = bArray[ind];
+        }
         return true;
     }
 };
 
-#endif /* JS_MORE_DETERMINISTIC */
+//#endif /* JS_MORE_DETERMINISTIC */
 
 static bool
 Snapshot(JSContext* cx, HandleObject pobj_, unsigned flags, AutoIdVector* props)
@@ -426,7 +464,7 @@ Snapshot(JSContext* cx, HandleObject pob
 
     } while (pobj != nullptr);
 
-#ifdef JS_MORE_DETERMINISTIC
+//#ifdef JS_MORE_DETERMINISTIC
 
     /*
      * In some cases the enumeration order for an object depends on the
@@ -454,7 +492,7 @@ Snapshot(JSContext* cx, HandleObject pob
     if (!MergeSort(ids, n, tmp.begin(), SortComparatorIds(cx)))
         return false;
 
-#endif /* JS_MORE_DETERMINISTIC */
+//#endif /* JS_MORE_DETERMINISTIC */
 
     return true;
 }
